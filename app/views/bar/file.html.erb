


<div id='filedrop' class='filedrop'>
  <span id='filedrop_title'>Upload Spot</span>
  <span id='filedrop_subtitle'>Drop some files here.</span>
</div>

<script type='text/javascript'>


  var f = FileDrop.create('filedrop', {
                          url: '/bar/upload',
                          read_files: true,
                          upload_files: true,
                          client_side_zip: true,
                          hover_class: 'filedrop_over',

                          allow: [{
                            mime_type: 'image/jpeg',
                            extension: 'jpg'
                          },{
                            extension: 'jpg'
                          }]
                         });




  f.on_drop = function(files) {
    console.log(files.length + " files were dropped");
  };

  /* 
     Called when a file is disallowed based on allow or 
     disallow rules. The rules variable is an array of 
     the rules that triggered the disallow.
     An empty array means that the file was disallowed
     because the default is to disallow and no specific
     allow rule matched.
  */
 
  f.on_disallowed_file = function(file, rules) {
    console.log("File " + file.name + " was disallowed based on " + rules.length + " rules");
  }

  /* 
     Called when a file is allowed based on allow or 
     disallow rules. The rules variable is an array of 
     the rules that triggered the allow.
     An empty array means that the file was allowed
     because the default is to allow and no specific
     disallow rule matched.
  */

  f.on_allowed_file = function(file, rules) {
    console.log("File " + file.name + " was allowed based on " + rules.length + " rules");
  }

  f.on_receive_begin = function(files) {
    console.log("Some files were dropped! (actually " + files.length + ")");
  };

  f.on_receive_completed = function(files) {
    $('filedrop').innerHTML = "Received " + files.length + " files.";
    console.log("Received files: " + files.length);
  };

  f.on_receive_file_begin = function(file) {
    console.log("Receiving file: " + file);
  };

  f.on_receive_file_progress = function(file, bytes_received, bytes_total) {

    console.log("Receive progress for: " + bytes_received + " of " + bytes_total);

  };  

  f.on_receive_file_completed = function(file) {

    var str = "Received a file: " + file;
    if(file.is_archive) {
      str += ' [archive]';
    }
    if(file.parent_archive) {
      str += ' [from archive: ' + file.parent_archive.name + ']';
    }
    console.log(str);
  };


  f.on_upload_begin = function(files) {
    console.log("Beginning upload of " + files.length + " files");
  };

  f.on_upload_complete = function(files) {
    $('filedrop').innerHTML = "Finished uploading " + files.length + " files.";
    console.log("All uploads completed");
  };

  f.on_upload_file_begin = function(file) {
    console.log("File upload started: " + file.name);
  };

  f.on_upload_file_progress = function(file, bytes_received, bytes_total) {

    console.log("File upload progress: " + bytes_received + " of " + bytes_total);

  };

  f.on_upload_file_complete = function(file, bytes_received) {
    console.log("Uploaded file: " + file.name + " in " + bytes_received + " bytes");
  };

  f.on_upload_error = function(http_status, http_response) {
    console.log("Error with http status " + http_status + " and response: " + http_response);
  };
  
  f.on_upload_aborted = function() {
    console.log("Upload aborted.");
  };

  f.on_decompression_error = function(file, msg) {
    console.log("Error decompressing file '" + file.name + "' in archive '" + file.parent_archive.name + "': " + msg);
  };

  f.on_droparea_enter = function() {
    $('filedrop').innerHTML = "Let them drop!";
    console.log("Files are being held over drop-aerea.");
  };

  f.on_droparea_exit = function() {
    $('filedrop').innerHTML = "Drop some files here.";
    console.log("Hanging files exited drop-area.");
  };




</script>
